package antimalware

import (
	"fmt"
	"strings"

	"github.com/jonas-fan/dsdd/pkg/dsa/diagnostic/event"
	"github.com/jonas-fan/dsdd/pkg/pretty"
)

type AntiMalwareEvent struct {
	Action      string
	Time        string
	Computer    string
	EventOrigin string
	Malware     string
	VirusType   string
	Reason      string
	Infection   string
	Md5         string
	Sha1        string
	Sha256      string
}

const eventFormat = `Origin: %v <%v>
Time:   %v
Event:  %v | %v
Reason: %v
Action: %v

%v
`

func (e *AntiMalwareEvent) assign(key string, value string) {
	switch strings.ToLower(key) {
	case "action taken":
		e.Action = value
	case "computer":
		e.Computer = value
	case "event origin":
		e.EventOrigin = value
	case "infected file(s)":
		e.Infection = value
	case "malware":
		e.Malware = value
	case "reason":
		e.Reason = value
	case "file md5":
		e.Md5 = value
	case "file sha-1":
		e.Sha1 = value
	case "file sha-256":
		e.Sha256 = value
	case "time":
		e.Time = fmt.Sprint(event.ToTime(value).Format("2006-01-02 15:04:05"))
	case "major virus type":
		e.VirusType = value
	default:
		// don't bother about these
	}
}

// String implements the `event.Event` interface.
func (e *AntiMalwareEvent) String() string {
	return fmt.Sprintf(eventFormat,
		e.EventOrigin,
		e.Computer,
		e.Time,
		e.VirusType,
		e.Malware,
		e.Reason,
		e.Action,
		pretty.Indent(e.Infection))
}

func Parse(header []string, fields []string) event.Event {
	e := &AntiMalwareEvent{}

	for i := range header {
		e.assign(header[i], fields[i])
	}

	return e
}
